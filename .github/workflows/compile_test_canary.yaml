name: Compile, Test and Canary

on:
  # The workflow is triggred when a PR is created, edited,reopened,review_requested or synchronize
  pull_request:
    types: [opened,edited,reopened,review_requested,synchronize]

jobs:
  # The goal of this job is compile, test and create the package
  maven_job:
    name: Compile, Test, and Package
    # odemo is a tag of the Self-hosted runner, to run this Jobs inside the tagged VM
    runs-on: odemo
    # Those jobs are triggered only if the target branch is master
    if: ${{ github.base_ref == 'master' }} 

    steps:
      # checkout to the current branch
      - uses: actions/checkout@v2 
        with:
          ref: ${{ github.head_ref }}
      # set the JDK version
      - name: Set up JDK 13.0.1 
        uses: actions/setup-java@v1
        with:
          java-version: 13.0.1
          java-package: jdk
      # run mvn with a custom settings.xml file because Github overide everytime the default settings.xml file
      - name: Maven compile, test and package
        run: mvn -s /etc/maven/custom/settings.xml clean test install package
      # upload the jar to use it later when we are building the Docker image
      - name: Upload artifact jar
        uses: actions/upload-artifact@v2
        with:
          name: odemo
          path: target/cicd-demo-app-*.jar
      # upload the Dockerfile to use it later when we are building the Docker image
      - name: Upload artifact Dockerfile
        uses: actions/upload-artifact@v2
        with:
          name: Dockerfile
          path: Dockerfile
  # The goal of this job is building a new Docker image using the new package
  push_to_dockerhub:
    name: Building a Docker image and pushing it to DockerHub
    runs-on: ubuntu-18.04
    # this job runs only when the maven_job job is done and succeeded
    needs:
      - maven_job
    steps:
      # download the jar file that we uploaded in the previous job
      - name: Download artifact jar
        uses: actions/download-artifact@v2
        with:
          name: odemo
      # download the Dockerfile that we uploaded in the previous job
      - name: Download artifact Dockerfile
        uses: actions/download-artifact@v2
        with:
          name: Dockerfile
      # use the default Buildx configuration
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # Login to Dockerhub so we can later push to image
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          # Those params are configured as secrets in the Github repo
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      # Build and Push the image to Dockerhub
      - name: Push to Dockerhub registry
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          # We use the sha of the commit as tag 
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{github.sha}}
  # the goal of this job is sets the new image of the application in the cluster
  canary:
    name: Deploying the new application to the canary
    runs-on: odemo
    # configure an output (status), this output is a string that store the status of the Deployemnt ("Failed" or "succeeded")
    outputs:
      status: ${{ steps.status.outputs.status }}
    # this jobs needs push_to_dockerhub job to be done and succeeded
    needs: 
      - push_to_dockerhub
    steps:
      # set the new pushed image 
      - name: Deploy to cluster
        uses: steebchen/kubectl@v1.0.0
        env:
          # Inject the cluster's configuration
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          KUBECTL_VERSION: "1.15"
        with:
          # The kubectl command to set the image 
          args: -n ${{ github.event.repository.name }} set image deployment/${{ github.event.repository.name }} ${{ github.event.repository.name }}=${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{github.sha}}
      # This steps checks the status of the deployment and then return the status of the deployment ("Failed" or "succeeded") and also return 0 if the deployment succeeded and the 1 if not
      - name: Check deployment status
        id: status
        uses: ilanssari/okubectl@check_iterations
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          PROJECT_NAME: ${{ github.event.repository.name }}   
  # the goal of this job is write a comment with the status of the deployment in the PR
  comment_to_pr:
    name: Write the status of the deployment on the PR
    runs-on: ubuntu-18.04
    # this jobs always even if the previous job "canary" doesn't succeeded
    if: ${{ always() }}
    needs: canary
    steps:
      - name: Write the status on the PR
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            The canary ${{ needs.canary.outputs.status }}!
          repo-token: ${{ github.token }}
          repo-token-user-login: 'github-actions[bot]' # The user.login
          allow-repeats: true